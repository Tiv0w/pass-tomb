#!/usr/bin/env bash
# Tomb manager - Password Store Extension (https://www.passwordstore.org/)
# Copyright (C) 2017 Alexandre PUJOL <alexandre@pujol.io>.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Test units suite

# WARNING: This test suite will slam all running tombs on your system.

#
# pass config
#
PASS="$(which pass)"
export PASSWORD_STORE_TOMB="tomb"
export PASSWORD_STORE_ENABLE_EXTENSIONS=true
export PASSWORD_STORE_EXTENSIONS_DIR="../"
export PASSWORD_STORE_DIR="/tmp/.password-store"
export PASSWORD_STORE_TOMB_FILE="/tmp/password.tomb"
export PASSWORD_STORE_TOMB_KEY="/tmp/password.tomb.key"
_pass() {
	${PASS} "$@"
	return $?
}
pass_populate() {
	_pass generate Emails/user1
	return $?
}


#
# Common colors and functions
#
red='\e[0;31m'
green='\e[0;32m'
yellow='\e[0;33m'
blue='\e[0;34m'
bold='\e[1m'
Bred='\e[1;31m'
Bgreen='\e[1;32m'
Byellow='\e[1;33m'
Bblue='\e[1;34m'
reset='\e[0m'
title() { echo -e "${Bblue}::${reset} ${bold}${*}${reset}"; }
msg() { echo -e " ${bold} . ${reset} ${*}"; }
alert() { echo -e " $${Byellow}(*)${reset} ${*}"; }
warn() { echo -e " ${Byellow}[W]${reset}${bold} Warning :${reset} ${*}"; }
success() { echo -e " ${Bgreen}(*)${reset} ${green}${*}${reset}"; }
error() { echo -e " ${Bred}[*]${reset}${bold} Error :${reset} ${*}"; }
fail() { echo -e " ${Bred}[*]${reset} ${red}${*}${reset}"; }
die() { _error "${@}" && exit 1; }
notice() { echo; title "${@}"; echo; }
clean() {
	notice "Cleaning tomb leftovers"
	tomb slam
	sudo rm -rf $(find /tmp -name '*password*' 2>/dev/null)
}

#
# Test suite config
#
GLOBAL_RESULT=0
typeset -A results
tests=(	pass-tomb populate pass-open pass-close pass-tomb-sub pass-tomb-opt
pass-tomb-share pass-tomb-noinit)

#
# GnuPG Conf.
#
# Note: the assumption is the test keys are unencrypted.
export GNUPGHOME="gnupg/"
chmod 700 "$GNUPGHOME"
KEY1="D4C78DB7920E1E27F5416B81CC9DB947CF90C77B"
KEY2="70BD448330ACF0653645B8F2B4DDBFF0D774A374"
KEY3="62EBE74BE834C2EC71E6414595C4B715EB7D54A8"
KEY4="9378267629F989A0E96677B7976DD3D6E4691410"
KEY5="4D2AFBDE67C60F5999D143AFA6E073D439E5020C"
#export PASSWORD_STORE_SIGNING_KEY="$KEY1"


#
# Test Suite
#
notice "Loading test suite"

pass_tomb() {
	notice "Testing password tomb creation and store initialisation"
	_pass tomb "$KEY1" --verbose --unsafe
	test $? = 0 && results[pass-tomb]=SUCCESS

	pass_populate
	test $? = 0 && results[populate]=SUCCESS

	_pass close
	test $? = 0 && results[pass-close]=SUCCESS

	_pass open
	test $? = 0 && results[pass-open]=SUCCESS

}

pass_tomb_noinit() {
	local res=0
	clean

	notice "Testing password store creation without store initialisation"
	_pass tomb "$KEY1" --no-init --verbose --unsafe
	test $? = 0 || res=1
	_pass init "$KEY2"
	test $? = 0 || res=1
	pass_populate
	test $? = 0 || res=1
	_pass close
	test $? = 0 || res=1
	test $res = 0 && results[pass-tomb-noinit]=SUCCESS
}

pass_tomb_subfolder() {
	local res=0
	clean

	notice "Testing password tomb in subfolder"
	_pass tomb "$KEY1" --path=perso --verbose --unsafe
	test $? = 0 || res=1
	_pass generate perso/Emails/user1
	test $? = 0 || res=1
	test $res = 0 && results[pass-tomb-sub]=SUCCESS
}

pass_tomb_shared() {
	local res=0
	clean

	notice "Testing a shared password tomb"
	_pass tomb "$KEY1" "$KEY2" "$KEY3" --verbose --unsafe
	test $? = 0 || res=1
	pass_populate
	test $? = 0 || res=1
	test $res = 0 && results[pass-tomb-share]=SUCCESS
}

pass_tomb_opt() {
	local res=0

	notice "Test - Bad options"
	_pass tomb &> /dev/null					# Need a gpgid
	test $? = 1 || res=1
	_pass tomb Website/user &> /dev/null		# Not a gpgid
	test $? = 1 || res=1
	_pass tomb --unknown-option	&> /dev/null # Not a known option
	test $? = 1 || res=1
	_pass tomb --help &> /dev/null			# Help exist
	test $? = 0 || res=1
	test $res = 0 && results[pass-tomb-opt]=SUCCESS
}

clean
pass_tomb
pass_tomb_noinit
pass_tomb_subfolder
pass_tomb_shared
pass_tomb_opt

#
# Units Test Results
#
notice "Test Results"
for t in ${tests[@]}; do
	res=${results[$t]:-FAIL}
	if [[ "$res" == "SUCCESS" ]]; then
		success "$t\t$res"
	else
		fail "$t\t$res"
		GLOBAL_RESULT=1
	fi
done

success "Done. You can remove temporary leftovers from ${PASSWORD_STORE_DIR}/"

unset PASSWORD_STORE_ENABLE_EXTENSIONS
unset PASSWORD_STORE_EXTENSIONS_DIR
unset PASSWORD_STORE_DIR
unset PASSWORD_STORE_TOMB_FILE
unset PASSWORD_STORE_TOMB_KEY
unset PASSWORD_STORE_SIGNING_KEY

[ $GLOBAL_RESULT = 0 ] && {
	success "Tests passed"
} || {
	error "Tests failed"
}

exit $GLOBAL_RESULT
